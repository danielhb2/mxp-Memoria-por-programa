#!/bin/bash
# Usar tput para los colores (más portable)
if [ -t 1 ]; then
    ROJO=$(tput setaf 1)
    AMARILLO=$(tput setaf 3 bold)
    CYAN=$(tput setaf 6 bold)
    VERDE=$(tput setaf 2)
    RESET=$(tput sgr0)
else
    ROJO=""
    AMARILLO=""
    CYAN=""
    VERDE=""
    RESET=""
fi

# Comprobar si se proporcionó al menos un nombre de programa
if [ $# -lt 1 ]; then
    NOMBRE_SCRIPT=$(basename "$0")
    echo "${ROJO}----------------------------------------------------"
    echo        "             MXP - Memoria por programa"
    echo        "----------------------------------------------------${RESET}"
    echo "Faltan argumentos"
    echo "Uso: $NOMBRE_SCRIPT <programa1> [programa2] [programa3] ..."
    exit 1
fi
    echo "${ROJO}----------------------------------------------------"
    echo        "             MXP - Memoria por programa"
    echo        "----------------------------------------------------"
echo "${VERDE}Uso de memoria para los programas ...${RESET}"
echo ""

# Definir formato para los encabezados y datos
format_header="%-8s %7s %12s %12s %s\n"
format_data="%-8s %7s %12s %12s %s\n"
format_subtotal="%12s %s\n"

printf "${CYAN}${format_header}${RESET}" "PID" "%MEM" "RSS" "VSZ" "COMANDO"
printf "${CYAN}%-50s${RESET}\n" "----------------------------------------------------"

total_rss_global=0
total_vsz_global=0
programas_encontrados=0

# Procesar cada programa proporcionado como argumento
for PROGRAMA in "$@"; do
    # Comprobar si el programa está en ejecución
    if ! pgrep -x "$PROGRAMA" > /dev/null; then
        echo "El programa '${ROJO}${PROGRAMA}${RESET}' no está en ejecución."
        continue
    fi
    
    programas_encontrados=$((programas_encontrados + 1))
    
    echo "Programa: ${ROJO}${PROGRAMA}${RESET}"
    
    # Obtener los PIDs del programa
    pids=$(pgrep -x "$PROGRAMA")
    
    for pid in $pids; do
        # Obtener información de memoria mediante ps y formatearla
        mem_info=$(ps -p $pid -o pid=,%mem=,rss=,vsz=,comm=)
        pid=$(echo $mem_info | awk '{print $1}')
        mem_percent=$(echo $mem_info | awk '{print $2}')
        rss=$(echo $mem_info | awk '{print $3}')
        vsz=$(echo $mem_info | awk '{print $4}')
        comm=$(echo $mem_info | awk '{print $5}')
        
        # Formatear RSS y VSZ a formato legible
        rss_human=$(numfmt --to=iec --suffix=B --format="%.2f" $((rss * 1024)))
        vsz_human=$(numfmt --to=iec --suffix=B --format="%.2f" $((vsz * 1024)))
        
        printf "$format_data" "$pid" "$mem_percent%" "$rss_human" "$vsz_human" "$comm"
    done
    
    # Calcular el total si hay múltiples instancias de este programa
    if [ $(echo "$pids" | wc -w) -gt 1 ]; then
        echo "  ${AMARILLO}Subtotal para '${PROGRAMA}':${RESET}"
        total_rss=$(ps -p $(echo $pids | tr ' ' ',') -o rss --no-headers | awk '{sum+=$1} END {print sum}')
        total_vsz=$(ps -p $(echo $pids | tr ' ' ',') -o vsz --no-headers | awk '{sum+=$1} END {print sum}')
        
        rss_human=$(numfmt --to=iec --suffix=B --format="%.2f" $((total_rss * 1024)))
        vsz_human=$(numfmt --to=iec --suffix=B --format="%.2f" $((total_vsz * 1024)))
        
        printf "${AMARILLO}$format_subtotal${RESET}" "RSS total:" "$rss_human"
        printf "${AMARILLO}$format_subtotal${RESET}" "VSZ total:" "$vsz_human"
        
        # Sumar al total global
        total_rss_global=$((total_rss_global + total_rss))
        total_vsz_global=$((total_vsz_global + total_vsz))
    else
        # Si solo hay una instancia, obtener sus valores para el total global
        single_rss=$(ps -p $pids -o rss --no-headers | tr -d ' ')
        single_vsz=$(ps -p $pids -o vsz --no-headers | tr -d ' ')
        total_rss_global=$((total_rss_global + single_rss))
        total_vsz_global=$((total_vsz_global + single_vsz))
    fi
    
    printf "%-50s\n" "----------------------------------------------------"
done

# Mostrar el total global si se encontró más de un programa
if [ $programas_encontrados -gt 1 ]; then
    rss_global_human=$(numfmt --to=iec --suffix=B --format="%.2f" $((total_rss_global * 1024)))
    vsz_global_human=$(numfmt --to=iec --suffix=B --format="%.2f" $((total_vsz_global * 1024)))
    
    echo "${CYAN}GLOBAL DE MEMORIA UTILIZADA POR TODOS LOS PROGRAMAS:${RESET}"
    printf "${AMARILLO}%-20s %s${RESET}\n" "RSS total global:" "$rss_global_human"
    printf "${AMARILLO}%-20s %s${RESET}\n" "VSZ total global:" "$vsz_global_human"
    printf "${CYAN}%-60s${RESET}\n" "----------------------------------------------------"
fi

if [ $programas_encontrados -eq 0 ]; then
    echo "No se encontró ninguno de los programas especificados en ejecución."
fi

echo ""
echo "${CYAN}RSS (Resident Set Size):${RESET} Memoria física utilizada"
echo "${CYAN}VSZ (Virtual Memory Size):${RESET} Memoria virtual asignada"
